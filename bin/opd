#!/usr/bin/env python3
# This file is placed in the Public Domain.


"Original Programmer Daemon"


import os
import pathlib
import signal
import sys
import time
import _thread


sys.path.insert(0, os.getcwd())


from opd.clients import Config
from opd.package import Table
from opd.workdir import Workdir, pidname


from opd import modules as MODS


"defines"


cfg   = Config()
p     = os.path.join
pname = f"{cfg.name}.modules"


"output"


def nil(txt):
    pass


def output(txt):
    print(txt)


def enable():
    global output
    output = print


def disable():
    global output
    output = nil


def handler(signum, frame):
    sys.exit(0)


signal.signal(signal.SIGHUP, handler)


"utilities"


def check(txt):
    args = sys.argv[1:]
    for arg in args:
        if not arg.startswith("-"):
            continue
        for c in txt:
            if c in arg:
                return True
    return False


def daemon(verbose=False):
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    pid2 = os.fork()
    if pid2 != 0:
        os._exit(0)
    if not verbose:
        with open('/dev/null', 'r', encoding="utf-8") as sis:
            os.dup2(sis.fileno(), sys.stdin.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as sos:
            os.dup2(sos.fileno(), sys.stdout.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as ses:
            os.dup2(ses.fileno(), sys.stderr.fileno())
    os.umask(0)
    os.chdir("/")
    os.nice(10)


def forever():
    while True:
        try:
            time.sleep(0.1)
        except (KeyboardInterrupt, EOFError):
            _thread.interrupt_main()


def pidfile(filename):
    if os.path.exists(filename):
        os.unlink(filename)
    path2 = pathlib.Path(filename)
    path2.parent.mkdir(parents=True, exist_ok=True)
    with open(filename, "w", encoding="utf-8") as fds:
        fds.write(str(os.getpid()))


def privileges():
    import getpass
    import pwd
    pwnam2 = pwd.getpwnam(getpass.getuser())
    os.setgid(pwnam2.pw_gid)
    os.setuid(pwnam2.pw_uid)


"scripts"


def background():
    daemon("-v" in sys.argv)
    privileges()
    if not check("v"):
        disable()
    pidfile(pidname(cfg.name))
    Table.inits(cfg.init or "irc,rss", pname)
    forever()


def service():
    signal.signal(signal.SIGHUP, handler)
    privileges()
    pidfile(pidname(cfg.name))
    Table.inits(cfg.init or "irc,rss", pname)
    forever()


"runtime"


def wrap(func):
    import termios
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        output("")
    except Exception as exc:
        later(exc)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)
    for line in errors():
        output(line)


def main():
    if check("s"):
        service()
    elif check("v"):
        enable()
    else:
        background()


if __name__ == "__main__":
    Workdir.wdr = os.path.expanduser(f"~/.{cfg.name}")
    main()
    sys.exit(0)
